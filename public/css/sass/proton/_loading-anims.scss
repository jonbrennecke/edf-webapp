@import "compass/css3/animation";

$PI: 3.14159;

@function ease-sin ( $p ) {
	@return 1 - cos( $p * $PI / 2 );
}

@function ease-circ ( $p ) {
	@return 1 - sqrt( 1 - $p * $p );
}

@function ease-elastic ( $p ) {
	@return if(($p == 0 or $p == 1), $p, - pow( 2, 8 * ($p - 1) ) * sin( ( ($p - 1) * 80 - 7.5 ) * $PI / 15 ));

}

			


.open-file-loading-anim {
	position: absolute;
	top: 50%;
	width: 100%;
}

.proton--loading-anim--squares {
	position: relative;
	margin: 0 auto;
	$size: 100px;
	margin-top: -0.5*$size;
	width: $size;
	height: $size;

	display: none; // TODO

	.proton--loading-anim--square {
		position: relative;
		float: left;
		box-sizing: border-box;

		&:before {
			position: absolute;
			content: '';
			width: 100%;
			height: 100%;
			box-sizing: border-box;
		}

		@include keyframes(proton--loading-anim--square) {
			from { background: rgba(#fff,0); }	
			to { background: rgba(#fff,1); }
		}

		$row: 12;
		$rate: 0.1s;

		width: $size/$row;
		height: $size/$row;
		border: 1px solid transparent;

		@for $i from 1 through pow($row,2) {
			&:nth-of-type(#{$i}) {
				&:before {
					@include animation-name(proton--loading-anim--square);

					$up: ((ceil($i/$row)) + (($i - 1) % $row));

					// $up generates a pattern like:
					// 1 2 3
					// 2 3 4
					// 3 4 5

					$wave: if($up<$row,$up,($row*2) - $up);

					// $wave generates a pattern like:
					// 1 2 3
					// 2 3 2
					// 3 2 1

					@debug $up;

					$n: ($wave);
					@include animation-delay( $row * $rate );
					@include animation-duration( $up * $rate);
					@include animation-iteration-count(infinite);
					@include animation-timing-function(ease-in-out);
					// @include animation-direction(alternate);
				}
			}
		}
	}
}